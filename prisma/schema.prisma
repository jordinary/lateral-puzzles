// Prisma schema for lateral puzzles app with NextAuth and level progression

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Credentials
  passwordHash  String?
  role          Role      @default(USER)
  lastLoginAt   DateTime?
  // Password reset
  resetToken    String?   @unique
  resetTokenExpires DateTime?

  accounts      Account[]
  sessions      Session[]
  levelUnlocks  LevelUnlock[]
  levelSolves   LevelSolve[]
  attempts      AnswerAttempt[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Level {
  id          String        @id @default(cuid())
  number      Int           @unique
  title       String
  prompt      String
  assetUrl    String?
  content     String?
  // Optional hint or note
  hint        String?

  answers     LevelAnswer[]
  unlocks     LevelUnlock[] @relation("UnlockedLevel")
  solves      LevelSolve[]
  attempts    AnswerAttempt[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model LevelAnswer {
  id            String  @id @default(cuid())
  levelId       String
  // Store normalized answer hash (bcrypt)
  answerHash    String

  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)
}

model LevelUnlock {
  id           String   @id @default(cuid())
  userId       String
  levelId      String
  unlockedAt   DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(name: "UnlockedLevel", fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId])
}

model LevelSolve {
  id         String   @id @default(cuid())
  userId     String
  levelId    String
  solvedAt   DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId])
}

model AnswerAttempt {
  id         String   @id @default(cuid())
  userId     String
  levelId    String
  isCorrect  Boolean
  answerText String
  createdAt  DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)
}


